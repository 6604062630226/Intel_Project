import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import LabelEncoder,RobustScaler

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = joblib.load("models/ensemble_model.joblib")

# UI ‡∏Ç‡∏≠‡∏á Streamlit
st.title("Heart Disease Prediction")

# ‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
age = st.slider("üìÖ ‡∏≠‡∏≤‡∏¢‡∏∏", 10, 100, 30)
sex = st.selectbox("Sex", ["M", "F"])
cp = st.selectbox("Chest Pain Type", ["TA", "ATA", "NAP", "ASY"])
rbp = st.slider("ü©∏ RestingBloodPressure", 50, 250, 100)
chol = st.slider("Cholesterol", 0, 600, 200)
fbs = st.selectbox("Fasting Blood Sugar > 120 mg/dl", [0, 1])
restecg = st.selectbox("Resting Electrocardiographic Results", ["Normal", "ST", "LVH"])
MaxHR = st.slider("Maximum Heart Rate Achieved", 0, 250, 150)
exang = st.selectbox("Exercise Induced Angina", ['N', 'Y'])
oldpeak = st.slider("ST Depression Induced by Exercise", 0.0, 10.0, 1.0)
slope = st.selectbox("Slope of the Peak Exercise ST Segment", ["Up", "Flat", "Down"])



# ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
input_data = pd.DataFrame([{
    "Age": age,
    "Sex": sex,
    "ChestPainType": cp,
    "RestingBP": rbp,
    "Cholesterol": chol,
    "FastingBS": fbs,
    "RestingECG": restecg,
    "MaxHR": MaxHR,
    "ExerciseAngina": exang,
    "Oldpeak": oldpeak,
    "ST_Slope": slope
}])

# üîπ **One-Hot Encoding ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•**
categorical_cols = ["Sex", "ChestPainType", "RestingECG", "ExerciseAngina", "ST_Slope"]
input_data = pd.get_dummies(input_data, columns=categorical_cols, drop_first=False)

# üîπ **‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏´‡πá‡∏ô**
expected_features = model.feature_names_in_

# ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ 0 ‡πÉ‡∏´‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
for feature in expected_features:
    if feature not in input_data.columns:
        input_data[feature] = 0

# ‡∏•‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏´‡πá‡∏ô
input_data = input_data[expected_features]

# **üîπ ‡πÉ‡∏ä‡πâ RobustScaler (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•)**
scaler = RobustScaler()
input_data_scaled = scaler.fit_transform(input_data)

# **üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢**
st.subheader("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô")
st.write(input_data)

# **üß† ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•**
if st.button("üîÆ Predict"):
    prediction = model.predict(input_data_scaled)
    probability = model.predict_proba(input_data_scaled)[:, 1]

    st.subheader("üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
    if prediction[0] == 1:
        st.error(f"üõë ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à! (‡πÇ‡∏≠‡∏Å‡∏≤‡∏™: {probability[0]:.2%})")
    else:
        st.success(f"‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à (‡πÇ‡∏≠‡∏Å‡∏≤‡∏™: {probability[0]:.2%})")



