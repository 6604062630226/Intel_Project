# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AWzB9bXE5c3lMFOXfkZZFvla_Dwp4RQB
"""

import numpy as np
import pandas as pd
import warnings
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

from sklearn import preprocessing
import matplotlib

from sklearn.preprocessing import LabelEncoder

df = pd.read_csv("/content/heart.csv")
df.head()
df.describe().T
df.dtypes

string_col = df.select_dtypes(include="object").columns
df[string_col]=df[string_col].astype("string")

df.dtypes

string_col=df.select_dtypes("string").columns.to_list()
num_col=df.columns.to_list()
#print(num_col)
for col in string_col:
    num_col.remove(col)
num_col.remove("HeartDisease")

df.describe().T

print(df.dtypes)

columns_to_label_encode = ['ST_Slope', 'Sex']

for column in df.select_dtypes(include=['string']).columns:

    dummies = pd.get_dummies(df[column], prefix=column, drop_first=False, dummy_na=False)

    df = pd.concat([df, dummies], axis=1)
    df.drop(columns=[column], inplace=True)

le = LabelEncoder()
for column in columns_to_label_encode:
    if column in df.columns:
        df[column] = le.fit_transform(df[column])

for column in df.select_dtypes(include=['string']).columns:

    dummies = pd.get_dummies(df[column], prefix=column, drop_first=False, dummy_na=False)

    df = pd.concat([df, dummies], axis=1)
    df.drop(columns=[column], inplace=True)

px.imshow(df.corr(),title="Correlation Plot of the Heat Failure Prediction")

df.info()

df.isnull().sum()

from sklearn.preprocessing import RobustScaler

scaler = RobustScaler()

y = df["HeartDisease"]
x = df.drop(columns=["HeartDisease"])
x = pd.DataFrame(scaler.fit_transform(x), columns=x.columns)

x

y

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix,classification_report,accuracy_score,roc_auc_score


forest=RandomForestClassifier(n_estimators=200,criterion="entropy")
forest.fit(x_train,y_train)
y_pred=forest.predict(x_test)
print(classification_report(y_test,y_pred))

from sklearn.svm import SVC
svm=SVC(kernel="linear",probability=True)
svm.fit(x_train,y_train)
y_pred=svm.predict(x_test)
print(classification_report(y_test,y_pred))

from sklearn.ensemble import VotingClassifier
ensemble_model = VotingClassifier(estimators=[
    ('svm', svm),
    ('forest', forest)
], voting='soft')
ensemble_model.fit(x_train, y_train)
probabilities = ensemble_model.predict_proba(x_test)[:, 1]  # เอาค่า probability ของ class 1
threshold = 0.5  # ลด threshold เพื่อลด False Negative
predictions = np.where(probabilities >= threshold, 1, 0)
print(classification_report(y_test, y_pred))

print(confusion_matrix(y_test,y_pred))

import joblib
joblib.dump(ensemble_model, 'model.joblib')